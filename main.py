# -*- coding: utf-8 -*-
from datetime import date, timedelta

from PyQt5.QtCore import QObject, pyqtSignal
from PyQt5.QtGui import QTextCursor
from PyQt5.QtWidgets import QApplication, QMainWindow

# Form implementation generated from reading ui file 'qtwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import zmain
from PyQt5 import QtCore, QtGui, QtWidgets
from qtwindow import Ui_MainWindow
import pandas as pd
import database
import recognition
import stockclass
from talib import EMA
import zfutu
from futu import *


class Signal(QObject):
    text_update = pyqtSignal(str)

    def write(self, text):
        self.text_update.emit(str(text))
        # loop = QEventLoop()
        # QTimer.singleShot(100, loop.quit)
        # loop.exec_()
        QApplication.processEvents()



class MyMainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, MainWindow,parent=None):
        super(MyMainWindow, self).__init__(parent)
        self.setupUi(MainWindow)

        #############################
        self.pushButton.clicked.connect(self.ZtradeUS)
        #self.pushButton.clicked.connect(self.UpdateTable)
        sys.stdout = Signal()

        sys.stdout.text_update.connect(self.updatetext)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    #def StartAnalyze(self):
    #    zmain.ZtradeUS()

    def ZtradeUS(self):
        # f= open(, encoding="utf-8")
        TradeCalendar_US = 'NYSE'
        codeDF = pd.read_csv("D:\ztrade\heatChartUS.csv", encoding="gb2312")
        # codeDF=pd.read_csv("D:\ztrade\codesShort.csv")
        codeList = codeDF['WindCodes'].tolist()

        startDate = date(2023, 8, 1)
        endDate = date(2024, 2,2)
        #endDate = date.today() - timedelta(days=1)

        # codeList=['AES.N']

        pass
        dtp_US = database.DataPrepare(database.conUS, database.engineUS, database.sessionUS, TradeCalendar_US)
        # 准备好待处理的stock类
        stocks_US = dtp_US.DataPreWindDB(codeList, startDate, endDate)
        # 使用stock列表进行beta分析
        # result= index.BetaAnalyze(startDate,endDate,stocks_US)
        pass
        # 识别的类

        recog_US = recognition.Recognition()
        recog_US.RecognitionProcess(stocks_US)

        zft_US = zfutu.Zfutu(market='US')
        zft_US.ModifyFutuStockList(recog_US.resultTable)

        self.UpdateTable(stocks_US)

    def updatetext(self, text):
        """
            更新textBrowser
        """
        cursor = self.textBrowser.textCursor()
        cursor.movePosition(QTextCursor.End)
        self.textBrowser.append(text)
        self.textBrowser.setTextCursor(cursor)
        self.textBrowser.ensureCursorVisible()

    #更新股票表格
    def UpdateTable(self,stocklist):
        # data = {'代码': ['app', 'Ja', 'St', 'Ri'], '名称': ['Tom', 'Jack', 'Steve', 'Ricky'],'价格': [19.1, 128.03, 3423.32,0.11],'涨跌幅': [19.1, 128.03, 3423.32,0.11],'成交量': [19.1, 128.03, 3423.32,0.11]}  # 两组列元素，并且个数需要相同
        # df = pd.DataFrame(data)  # 这里默认的 index 就是 range(n)，n 是列表的长度

        for stock in stocklist:
            dayPriceData=stock.dayPriceData
            close=dayPriceData['CLOSE'].iloc[-1]
            code=dayPriceData['CODE'].iloc[-1]
            open=dayPriceData['OPEN'].iloc[-1]
            volume=dayPriceData['VOLUME'].iloc[-1]
            changePct=format(100*(close-open)/open,'.2f')
            changePctStr=str(changePct)+'%'

            row_count = self.tableWidget.rowCount()  # 返回当前行数(尾部)
            self.tableWidget.insertRow(row_count)  # 尾部插入一行
            self.tableWidget.setItem(row_count-1, 0, QtWidgets.QTableWidgetItem(str(code)))
            self.tableWidget.setItem(row_count-1, 1, QtWidgets.QTableWidgetItem(str(code)))
            self.tableWidget.setItem(row_count - 1, 2, QtWidgets.QTableWidgetItem(str(close)))
            self.tableWidget.setItem(row_count - 1, 3, QtWidgets.QTableWidgetItem(changePctStr))
            self.tableWidget.setItem(row_count - 1, 4, QtWidgets.QTableWidgetItem(str(volume)))


        pass

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    myWin = MyMainWindow(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())